{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DropPointT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract DropPointT is Ownable{\r\n\r\n    uint256 private counterSampah=1;\r\n\r\n    struct DataPenampungan {\r\n        address userAddress;\r\n        string namaPengguna;\r\n        string emailPengguna;\r\n        uint256 idSampah;\r\n        string jenisSampah;\r\n        uint256 berat;\r\n        uint256 waktu;\r\n        uint256[] dropPoints;\r\n        bool sudahDivalidasi;\r\n    }\r\n\r\n    struct DataSampah {\r\n        address userAddress;\r\n        string namaPengguna;\r\n        string emailPengguna;\r\n        uint256 idSampah;\r\n        string jenisSampah;\r\n        uint256 berat;\r\n        uint256 waktu;\r\n        uint256[] dropPoints;\r\n    }\r\n\r\n    mapping(uint256 => DataPenampungan) public dataPenampungan;\r\n    mapping(uint256 => DataSampah) public sampahList;\r\n\r\n    event SampahDitambahkan(address userAddress, uint256 idSampah, string jenisSampah, uint256 berat, uint256 waktu, uint256[] dropPoints);\r\n    event SampahDitambahkanKePenampung(address userAddress, uint256 idSampah, string jenisSampah, uint256 berat, uint256 waktu, uint256[] dropPoints);\r\n    event DataDivalidasi(uint256 idSampah);\r\n    \r\n    event SampahDikirimKeDropPointSelanjutnya(\r\n    address userAddress,\r\n    uint256 idSampah,\r\n    string jenisSampah,\r\n    uint256 berat,\r\n    uint256 waktu,\r\n    uint256[] dropPoints\r\n    );\r\n\r\n    function jumlahsampah () external view returns (uint){\r\n\r\n        if (counterSampah <= 1 ){\r\n            return 0 ;\r\n        }\r\n        else {\r\n            return counterSampah - 1;\r\n        } \r\n    }\r\n\r\n    function inputDataPenampungan(\r\n        string memory _namaPengguna,\r\n        string memory _emailPengguna,\r\n        string memory _jenisSampah,\r\n        uint256 _berat,\r\n        uint256[] memory _dropPoints\r\n    ) public {\r\n        address userAddress= msg.sender; \r\n\r\n        uint256 idSampah = counterSampah;\r\n        counterSampah++;\r\n\r\n        dataPenampungan[idSampah] = DataPenampungan(\r\n            userAddress,\r\n            _namaPengguna,\r\n            _emailPengguna,\r\n            idSampah,\r\n            _jenisSampah,\r\n            _berat,\r\n            block.timestamp,\r\n            _dropPoints,\r\n            false\r\n        );\r\n\r\n        emit SampahDitambahkanKePenampung(\r\n            dataPenampungan[idSampah].userAddress,\r\n            idSampah,\r\n            dataPenampungan[idSampah].jenisSampah,\r\n            dataPenampungan[idSampah].berat,\r\n            dataPenampungan[idSampah].waktu,\r\n            dataPenampungan[idSampah].dropPoints\r\n        );\r\n    }\r\n\r\n    function verifikasiDataSampah(uint256 _idSampah) external onlyOwner {\r\n     \r\n        require(!dataPenampungan[_idSampah].sudahDivalidasi, \"Data sudah divalidasi\");\r\n        \r\n        sampahList[_idSampah] = DataSampah(\r\n            dataPenampungan[_idSampah].userAddress,\r\n            dataPenampungan[_idSampah].namaPengguna,\r\n            dataPenampungan[_idSampah].emailPengguna,\r\n            _idSampah,\r\n            dataPenampungan[_idSampah].jenisSampah,\r\n            dataPenampungan[_idSampah].berat,\r\n            dataPenampungan[_idSampah].waktu,\r\n            dataPenampungan[_idSampah].dropPoints\r\n        );\r\n\r\n        require(bytes(sampahList[_idSampah].namaPengguna).length > 0, \"Nama Tidak Boleh Kosong\");\r\n        require(bytes(sampahList[_idSampah].emailPengguna).length > 0, \"Email Tidak Boleh Kosong\");\r\n        require(sampahList[_idSampah].berat > 0, \"Berat sampah harus lebih besar dari 0\");\r\n        require(bytes(sampahList[_idSampah].jenisSampah).length > 0, \"Jenis sampah tidak boleh kosong\");\r\n        \r\n        dataPenampungan[_idSampah].sudahDivalidasi = true;\r\n        \r\n        emit DataDivalidasi(_idSampah);\r\n        \r\n        emit SampahDitambahkan(\r\n            dataPenampungan[_idSampah].userAddress,\r\n            _idSampah,\r\n            dataPenampungan[_idSampah].jenisSampah,\r\n            dataPenampungan[_idSampah].berat,\r\n            dataPenampungan[_idSampah].waktu,\r\n            dataPenampungan[_idSampah].dropPoints\r\n        );\r\n        bersihkanDataSampah(_idSampah);\r\n        \r\n    }\r\n\r\n    function getDataSampahById(uint256 _idSampah) public view returns (DataSampah memory) {\r\n        return sampahList[_idSampah];\r\n    }\r\n\r\n    function bersihkanDataSampah(uint256 _idSampah) public onlyOwner {\r\n        delete dataPenampungan[_idSampah];\r\n    }\r\n\r\n    function kirimKeDropPointSelanjutnya(uint256 _idSampah) external onlyOwner {\r\n\r\n    require(dataPenampungan[_idSampah].sudahDivalidasi = true, \"Data belum divalidasi\");\r\n    require(sampahList[_idSampah].dropPoints.length < 3, \"Sampah telah mencapai batas maksimal drop point\");\r\n\r\n\r\n    uint256 lastDropPoint = sampahList[_idSampah].dropPoints[sampahList[_idSampah].dropPoints.length - 1];\r\n\r\n    uint256 nextDropPoint = lastDropPoint + 1;\r\n\r\n    sampahList[_idSampah].dropPoints.push(nextDropPoint);\r\n\r\n    sampahList[_idSampah].waktu = block.timestamp;\r\n\r\n    emit SampahDikirimKeDropPointSelanjutnya(\r\n        sampahList[_idSampah].userAddress,\r\n        _idSampah,\r\n        sampahList[_idSampah].jenisSampah,\r\n        sampahList[_idSampah].berat,\r\n        sampahList[_idSampah].waktu,\r\n        sampahList[_idSampah].dropPoints\r\n    );\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}